#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

if [ -z $(eval command -v docker) ]; then
	echo "Docker is not installed"
	exit 1
fi

if [ -z $(eval command -v fin) ]; then
	echo "Docksal is not installed"
	exit 1
fi

if [ -d ".docksal/" ]; then
	DOCROOT=$(grep DOCROOT .docksal/docksal.env | xargs)
	DOCROOT=${DOCROOT#*=}
	DOCROOT_LOCAL_PATH=$(eval pwd)/${DOCROOT}
elif [ -d "../.docksal" ]; then
	DOCROOT=$(grep DOCROOT ../.docksal/docksal.env | xargs)
	DOCROOT=${DOCROOT#*=}
	DOCROOT_LOCAL_PATH=$(eval cd .. && pwd)/${DOCROOT}
fi

if [ ! -z $(eval find . -name Mage.php -print) ]; then
	MVERSION="1"
else
	MVERSION="2"
fi

######################################################
####		 Functions
######################################################

function init {

	if [ -z "$MVERSION" ]; then
		read -p "Magento Version [1 or 2]: " MVERSION
		if [ -z "$MVERSION" ]; then
			MVERSION="2"
			echo "Selected Magento 2";
		fi
	fi

	read -p "Magento Type [ce/ee]: " MAGE_TYPE
	if [ -z "$MAGE_TYPE" ]; then
		MAGE_TYPE="ce"
	fi
	if [ "$MAGE_TYPE" = "ee" ]; then
		REPO_M2="--repository-url=https://repo.magento.com/ magento/project-enterprise-edition"
	else
		REPO_M2="magento/community-edition"
	fi

	askProjectName
	
	askDocroot

	copyN98

	if [ ! -d ".docksal" ]; then
		echo -e "${BLUE}Downloading Docksal...${NC}"
		cp -rf ~/.dsal/docksal-magento/.docksal .  &> /dev/null
		echo -e "${GREEN}Docksal downloaded!${NC}"
		echo ""
	fi

	echo -e "${BLUE}Setting Docksal config...${NC}"
	# if is mac
    if [[ "$OSTYPE" == "darwin"* ]]; then
    	sed -i "" "s~VIRTUAL_HOST=magento.docksal~VIRTUAL_HOST=${BASEURL}~1" .docksal/docksal.env
    	sed -i "" "s~DOCROOT=docroot~DOCROOT=${DOCROOT}~1" .docksal/docksal.env
    	sed -i "" "s~0:3306~33061:3306~1" .docksal/docksal.env

    	if [ "$MVERSION" -eq "1" ]; then
    		sed -i "" "s~CLI_IMAGE='docksal/cli:2.0-php7.1'~CLI_IMAGE='docksal/cli:2.0-php5.6'~1" .docksal/docksal.env
		else
			sed -i "" "s~CLI_IMAGE='docksal/cli:2.0-php7.1'~CLI_IMAGE='docksal/cli:2.0-php7.0'~1" .docksal/docksal.env
    	fi
	else
		sed -i "s~VIRTUAL_HOST=magento.docksal~VIRTUAL_HOST=${BASEURL}~1" .docksal/docksal.env
		sed -i "s~DOCROOT=docroot~DOCROOT=${DOCROOT}~1" .docksal/docksal.env
		sed -i "s~0:3306~33061:3306~1" .docksal/docksal.env

		if [ "$MVERSION" -eq "1" ]; then
    		sed -i "s~CLI_IMAGE='docksal/cli:2.0-php7.1'~CLI_IMAGE='docksal/cli:2.0-php5.6'~1" .docksal/docksal.env
		else
			sed -i "s~CLI_IMAGE='docksal/cli:2.0-php7.1'~CLI_IMAGE='docksal/cli:2.0-php7.0'~1" .docksal/docksal.env
    	fi
	fi
	echo -e "${GREEN}Config updated!${NC}"
	echo ""

	fin up
	fin addon install mailhog

	if [ "$MVERSION" -eq "2" ]; then
		fin exec "cd /var/www/${DOCROOT}; composer install"
	fi

	importDb

	restorePermissions

}

function askProjectName {
	read -p "Project Name (lowercase/no-spaces): " PROJECTNAME
	BASEURL=${PROJECTNAME}.docksal
}

function askDocroot {
	if [ -z "$DOCROOT" ]; then
		read -p "Doc Root (docroot): " DOCROOT
		if [ -z "$DOCROOT" ]; then
			DOCROOT="docroot"
		fi
		echo ""
	fi
}

function downloadN98 {
	if [ ! -f ~/.dsal/n98-magerun1.phar ]; then
		echo -e "${BLUE}Downloading n98-magerun.phar...${NC}"
		curl -O https://files.magerun.net/n98-magerun.phar &> /dev/null
		mv n98-magerun.phar ~/.dsal/n98-magerun1.phar 
		echo -e "${GREEN}n98-magerun.phar downloaded!${NC}"
	fi
	if [ ! -f ~/.dsal/n98-magerun2.phar ]; then
		echo -e "${BLUE}Downloading n98-magerun2.phar...${NC}"
		curl -O https://files.magerun.net/n98-magerun2.phar &> /dev/null
		mv n98-magerun2.phar ~/.dsal/
		echo -e "${GREEN}n98-magerun2.phar downloaded!${NC}"
	fi
}

function copyN98 {
	echo -e "${BLUE}Downloading n98...${NC}"
	cp ~/.dsal/n98-magerun${MVERSION}.phar ${DOCROOT_LOCAL_PATH}/n98
	chmod +x ${DOCROOT_LOCAL_PATH}/n98
	echo -e "${GREEN}n98 downloaded!${NC}"
	echo ""
}

function createConfigFile {

	echo -e "${BLUE}\nDownloading config file...${NC}"
	echo -e ""
	read -p "Crypt [783eee839c0396cf398e07e218e89e0a]: " CRYPT
	if [ -z $CRYPT ]; then
		CRYPT="783eee839c0396cf398e07e218e89e0a"
	fi

	read -p "Table Prefix: " TABLE_PREFIX
	if [ -z $TABLE_PREFIX ]; then
		TABLE_PREFIX=""
	fi

	read -p "Backend Frontname [backend]: " BACKEND_FRONTNAME
	if [ -z $BACKEND_FRONTNAME ]; then
		BACKEND_FRONTNAME="backend"
	fi

	if [ "$MVERSION" -eq "2" ]; then
		CONFIG_FILE=$DOCROOT/app/etc/env.php
		curl -k https://raw.githubusercontent.com/fsspencer/docksal-dsal/master/config/m2/${MAGE_TYPE}/env.php > $CONFIG_FILE
	else
		CONFIG_FILE=$DOCROOT/app/etc/local.xml
		curl -k https://raw.githubusercontent.com/fsspencer/docksal-dsal/master/config/m1/local.xml.sample > $CONFIG_FILE
	fi

	replaceConfigValues
	echo -e "${GREEN}Magento config updated!${NC}"
	echo ""

	rm -rf $PROJECT_PATH/var/cache/*
}

function replaceConfigValues {

	if [[ "$OSTYPE" == "darwin"* ]]; then
		sed -i '' "s/CRYPT/${CRYPT}/1" $CONFIG_FILE
		sed -i '' "s/TBL_PREFIX/${TABLE_PREFIX}/1" $CONFIG_FILE
		sed -i '' "s/DB_HOST/db/1" $CONFIG_FILE
		sed -i '' "s/DB_USER/root/1" $CONFIG_FILE
		sed -i '' "s/DB_PASSWORD/root/1" $CONFIG_FILE
		sed -i '' "s/DB_NAME/default/1" $CONFIG_FILE
		sed -i '' "s/BACKEND_FRONTNAME/backend/1" $CONFIG_FILE
	else
		sed -i "s/CRYPT/${CRYPT}/1" $CONFIG_FILE
		sed -i "s/TBL_PREFIX/${TABLE_PREFIX}/1" $CONFIG_FILE
		sed -i "s/DB_HOST/db/1" $CONFIG_FILE
		sed -i "s/DB_USER/root/1" $CONFIG_FILE
		sed -i "s/DB_PASSWORD/root/1" $CONFIG_FILE
		sed -i "s/DB_NAME/default/1" $CONFIG_FILE
		sed -i "s/BACKEND_FRONTNAME/backend/1" $CONFIG_FILE
	fi
}


function importDb {
	createConfigFile
	read -p "Import database? [Y/n]: " IMPORTDB
	if [ "$IMPORTDB" = "Y" ] || [ "$IMPORTDB" = "y" ]; then
		read -p "SQL Filename?: " SQLNAME
		echo ""

		fin sqli $SQLNAME
		echo ""

		setDbValues
		createAdminUser
	fi
}

function setDbValues {
	echo -e "${BLUE}\nSetting DB values...${NC}"
	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "%/base_%" AND value LIKE "http%" AND scope_id > 0;' &> /dev/null
	echo -e "${GREEN}Extra stores URLs removed${NC}"
	
	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "%dev/js/%" OR path LIKE "%dev/css/%";' &> /dev/null
	echo -e "${GREEN}Merge/Minify/Bundling disabled${NC}"

	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "web/secure/use_in%";' &> /dev/null
	echo -e "${GREEN}Secure URLs disabled${NC}"

	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "web/cookie/cookie_domain%";' &> /dev/null
	echo -e "${GREEN}Cookie Domain removed${NC}"

	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "catalog/frontend/flat_%";' &> /dev/null
	echo -e "${GREEN}Flat Catalog disabled${NC}"

	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "admin/url/%";' &> /dev/null
	echo -e "${GREEN}Custom Admin Path disabled${NC}"

	fin db cli --db=default 'DELETE FROM core_config_data WHERE path LIKE "%base_url%";' &> /dev/null
	echo -e "${GREEN}Stores URLS removed${NC}"

	if [ -f ${DOCROOT}/bin/magento ] || [ -f ./bin/magento ]; then
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/unsecure/base_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/unsecure/base_link_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/secure/base_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/secure/base_link_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/cookie/cookie_domain ${BASEURL}"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/cookie/cookie_domain ${BASEURL}"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set web/url/use_store 1"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:store:set dev/static/sign 0"
		
		fin exec "cd /var/www/${DOCROOT}; php bin/magento setup:upgrade"
		fin exec "cd /var/www/${DOCROOT}; php bin/magento cache:enable"
		fin exec "cd /var/www/${DOCROOT}; php bin/magento cache:clean"
	else
		fin exec "cd /var/www/${DOCROOT}; php n98 config:set web/unsecure/base_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:set web/unsecure/base_link_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:set web/secure/base_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:set web/secure/base_link_url http://${BASEURL}/"
		fin exec "cd /var/www/${DOCROOT}; php n98 config:set web/cookie/cookie_domain $BASEURL"

		fin exec "cd /var/www/${DOCROOT}; rm -rf var/cache/*"
	fi
	echo -e "${GREEN}Magento DB values updated!${NC}"
	echo ""
}

function createAdminUser {
	if [ "$MVERSION" -eq "2" ]; then
		read -p "Create Admin User? [Y/n]: " CREATE_ADMINUSER
		if [ "$CREATE_ADMINUSER" = "Y" ] || [ "$CREATE_ADMINUSER" = "y" ]; then
			read -p "Admin Username: " ADMIN_USERNAME
			read -p "Admin Password: " ADMIN_PASSWORD
			fin db cli --db=default "REPLACE INTO authorization_role (role_id, parent_id, tree_level, sort_order, role_type, user_id, user_type, role_name) VALUES (1, 0, 1, 1, 'G', 0, '2', 'Administrators');"
			fin db cli --db=default "REPLACE INTO authorization_rule (rule_id, role_id, resource_id, privileges, permission) VALUES (1, 1, 'Magento_Backend::all', NULL, 'allow');"
			fin exec "php /var/www/${DOCROOT}/bin/magento admin:user:create --admin-user='${ADMIN_USERNAME}' --admin-firstname='Admin' --admin-lastname='Web' --admin-email='admin@sample.com' --admin-password='${ADMIN_PASSWORD}' "
		fi
	fi
}

function restorePermissions {
	echo -e "${BLUE}\nSetting up permissions...${NC}"
	fin exec "cd /var/www ; sudo chmod -R 755 ${DOCROOT}"
	fin exec "cd /var/www/${DOCROOT} ;  find . -type f -exec chmod 644 {} \; ; find . -type d -exec chmod 755 {} \; "
	echo -e "${GREEN}Permissions restored!${NC}"
	echo ""
}

function setup {
	if [ -z $(eval command -v git) ]; then
		echo "${RED}GIT is not installed${NC}"
		exit 1
	fi	

	mkdir -p ~/.dsal/bin

	if [ -f ~/.dsal/bin/dsal ]; then
		rm -rf ~/.dsal/bin		
		rm /usr/local/bin/dsal
	fi

	if [ ! -d ~/.dsal/docksal-magento ]; then
		echo -e "${BLUE}Downloading Docksal Magento image...${NC}"
		git clone https://github.com/docksal/magento ~/.dsal/docksal-magento &> /dev/null
	fi
	
	CURDIR=$(eval pwd)
	cd ~/.dsal/docksal-magento
	echo -e "${BLUE}Pulling Docksal Magento latest version...${NC}"
	git pull

	cd $CURDIR

	downloadN98

	git clone https://github.com/fsspencer/docksal-dsal ~/.dsal/bin &> /dev/null
	ln -s ~/.dsal/bin/dsal /usr/local/bin/dsal

	echo -e "${GREEN}DSAL installed properly. Now you can use it as 'dsal' in your terminal${NC}"
}

function ioncube {
	echo -e "${BLUE}Downloading and installing ioncube ${IONCUBE_VERSION}... ${NC}"
	if [ "$MVERSION" -eq "1" ]; then	
		fin exec "cd /tmp \
			&& sudo curl -o ioncube.tar.gz http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz &> /dev/null \
		    && sudo tar -xzf ioncube.tar.gz \
		    && sudo mv ioncube/ioncube_loader_lin_5.6.so /usr/local/lib/php/extensions/ \
		    && sudo rm -Rf ioncube.tar.gz ioncube \
		    && sudo echo 'zend_extension=/usr/local/lib/php/extensions/ioncube_loader_lin_5.6.so' > 00_docker-php-ext-ioncube_loader_lin_5.6.ini \
		    && sudo mv 00_docker-php-ext-ioncube_loader_lin_5.6.ini /usr/local/etc/php/conf.d/"
	else
		fin exec "cd /tmp \
			&& sudo curl -o ioncube.tar.gz http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz &> /dev/null \
		    && sudo tar -xzf ioncube.tar.gz \
		    && sudo mv ioncube/ioncube_loader_lin_7.0.so /usr/local/lib/php/extensions/ \
		    && sudo rm -Rf ioncube.tar.gz ioncube \
		    && sudo echo 'zend_extension=/usr/local/lib/php/extensions/ioncube_loader_lin_7.0.so' > 00_docker-php-ext-ioncube_loader_lin_7.0.ini \
		    && sudo mv 00_docker-php-ext-ioncube_loader_lin_7.0.ini /usr/local/etc/php/conf.d/"
	fi
}

function clearCache {
	if [ -d "./bin/magento" ] || [ -d "./app/Mage.php" ]; then
    	echo -e "${RED}The current directory is not a Magento project${NC}"
    	exit 1
    fi

    if [ -d "${DOCROOT_LOCAL_PATH}/var/cache" ]; then
    	find ${DOCROOT_LOCAL_PATH}/var/cache/ -type f -not -name '.htaccess' -delete
    	find ${DOCROOT_LOCAL_PATH}/var/cache/* -type d -print0 | xargs -0 rm -rf
    	echo -e "${BLUE}var/cache cleared!${NC}"

    fi
    
    if [ -d "${DOCROOT_LOCAL_PATH}/var/page_cache" ]; then
    	find ${DOCROOT_LOCAL_PATH}/var/page_cache/ -type f -not -name '.htaccess' -delete
    	find ${DOCROOT_LOCAL_PATH}/var/page_cache/* -type d -print0 | xargs -0 rm -rf
    	echo -e "${BLUE}var/page_cache cleared!${NC}"
    fi
    
    if [ -d "${DOCROOT_LOCAL_PATH}/var/generation" ]; then
    	find ${DOCROOT_LOCAL_PATH}/var/generation/ -type f -not -name '.htaccess' -delete
    	find ${DOCROOT_LOCAL_PATH}/var/generation/* -type d -print0 | xargs -0 rm -rf
    	echo -e "${BLUE}var/generation cleared!${NC}"
    fi
    
    if [ -d "${DOCROOT_LOCAL_PATH}/var/view_preprocessed" ]; then
    	find ./var/view_preprocessed/ -type f -not -name '.htaccess' -delete
    	find ./var/view_preprocessed/* -type d -print0 | xargs -0 rm -rf
    	echo -e "${BLUE}var/view_preprocessed cleared!${NC}"
    fi
    
    if [ -d "${DOCROOT_LOCAL_PATH}/generated" ]; then
    	find ${DOCROOT_LOCAL_PATH}/generated/ -type f -not -name '.htaccess' -delete
    	find ${DOCROOT_LOCAL_PATH}/generated/* -type d -print0 | xargs -0 rm -rf
    	echo -e "${BLUE}var/generated cleared!${NC}"
    fi
    
    if [ -d "${DOCROOT_LOCAL_PATH}/pub/static" ]; then
    	find ${DOCROOT_LOCAL_PATH}/pub/static/ -type f -not -name '.htaccess' -delete
    	find ${DOCROOT_LOCAL_PATH}/pub/static/* -type d -print0 | xargs -0 rm -rf
    	echo -e "${BLUE}pub/static cleared!${NC}"
    fi
}

function checkIsRunning {
	IS_RUNNING=$(eval fin status | grep " Up ")
	if [ -z "$IS_RUNNING" ]; then
		echo -e "${RED}Project is not running. Please run: fin up${NC}"
		exit 1
	fi
}


function outputData {
	echo -e "${GREEN}-------------------------------------${NC}"
	echo -e "${GREEN}Base URL: http://${BASEURL}${NC}"
	echo -e "${GREEN}-------------------------------------${NC}"
}


function usage {
  echo -e "Usage:\n\n  $SCRIPTNAME <action> <arguments...>"
  echo -e ""
  echo -e "Project:"
  echo -e " " "${GREEN}init${NC}" "\t\t" "Initialize new/existing Magento project"
  echo -e ""
  echo -e "Utilities:"
  echo -e " " "${GREEN}php${NC}" "\t\t" "Executes php cli within your project root"
  echo -e " " "${GREEN}composer${NC}" "\t" "Executes composer within your project root"
  echo -e " " "${GREEN}npm${NC}" "\t\t" "Executes npm within your project root"
  echo -e " " "${GREEN}n98${NC}" "\t\t" "Executes n98-magerun within your project root"
  echo -e " " "${GREEN}magento${NC}" "\t" "Executes Magento 2 command line tool (e.g: dsal magento setup:upgrade)"
  echo -e " " "${GREEN}phpunit${NC}" "\t" "Executes Magento 2 PHPUnit using executable file located in vendor/bin"
  echo -e ""
  echo -e "Magento Actions:"
  echo -e " " "${GREEN}config:url${NC}" "\t" "Set the Store URL and prepare the project for development"
  echo -e " " "${GREEN}c:c${NC}" "\t\t" "Clear cache, generation, view_preprocessed and static content"
  echo -e ""
  echo -e "System:"
  echo -e " " "${GREEN}setup${NC}" "\t" "Installs dsal command locally on your computer"
  echo -e " " "${GREEN}self-update${NC}" "\t" "Updates dsal locally on your computer"
  echo -e " " "${GREEN}permissions${NC}" "\t" "Restore file system permissions"
  echo -e " " "${GREEN}xdebug:enable${NC}" "" "Enable xDebug"
  echo -e " " "${GREEN}xdebug:disable${NC}" "Disable xDebug"
  echo -e " " "${GREEN}ioncube:install${NC}" "Install ioncube"
  echo -e ""
  echo ""
}

######################################################
####		 User Interaction
######################################################


case "$1" in
    init)
    shift 1
    init
    outputData
    exit 0
    ;;

    php)
    shift 1
    checkIsRunning
    fin exec "cd /var/www/${DOCROOT}; php $* "
    ;;

    composer)
    shift 1
    checkIsRunning
    fin exec "cd /var/www/${DOCROOT}; composer $* "
    ;;

    n98)
    shift 1
    checkIsRunning
    fin exec "cd /var/www/${DOCROOT}; php n98 $* "
    ;;

    magento)
    shift 1
    checkIsRunning
    fin exec "cd /var/www/${DOCROOT}; php bin/magento $* "
    ;;

    phpunit)
    shift 1
    checkIsRunning

    if [ ! -f ${DOCROOT_LOCAL_PATH}/vendor/bin/phpunit ]; then
    	echo -e "${RED}PHPUnit not found on vendor/bin/...${NC}"
    	exit 1
    fi

    if [ "$1" = "integration" ]; then
    	TEST_TYPE="integration"
    else
    	TEST_TYPE="unit"
    fi

    THIRD_ARG=""
    if [ ! -z "$3" ]; then
    	THIRD_ARG='"'$3'"'
    fi

    if [ -f ${DOCROOT_LOCAL_PATH}/dev/tests/${TEST_TYPE}/phpunit.xml ] || [ -f ${DOCROOT_LOCAL_PATH}/dev/tests/${TEST_TYPE}/phpunit.xml.dist ]; then
    	fin exec "cd /var/www/${DOCROOT}/dev/tests/${TEST_TYPE}/; php /var/www/${DOCROOT}/vendor/bin/phpunit $2 $THIRD_ARG "
	else
		echo -e "${RED}PHPUnit config parameters could not be found in ${DOCROOT_LOCAL_PATH}/dev/tests/${TEST_TYPE}/phpunit.xml.dist ...${NC}"
    	exit 1	
    fi
    ;;

    config:url)
    shift 1
    
    askProjectName
    askDocroot

    if [ ! -f ${DOCROOT_LOCAL_PATH}/n98 ]; then
		copyN98
	fi
    setDbValues
    ;;

    c:c)
    shift 1
    clearCache
    ;;

    setup)
    setup
    ;;

    self-update)
	echo -e "${BLUE}Fetching latest version...${NC}"
    setup
    ;;

    permissions)
    restorePermissions
    ;;

    xdebug:enable)
	# if is mac
    if [[ "$OSTYPE" == "darwin"* ]]; then
    	sed -i "" "s~XDEBUG_ENABLED=0~XDEBUG_ENABLED=1~1" .docksal/docksal.env
	else
		sed -i "s~XDEBUG_ENABLED=0~XDEBUG_ENABLED=1~1" .docksal/docksal.env
	fi
	fin restart
	echo -e "${GREEN}xDebug enabled!${NC}"
    ;;

    xdebug:disable)
    # if is mac
    if [[ "$OSTYPE" == "darwin"* ]]; then
    	sed -i "" "s~XDEBUG_ENABLED=1~XDEBUG_ENABLED=0~1" .docksal/docksal.env
	else
		sed -i "s~XDEBUG_ENABLED=1~XDEBUG_ENABLED=0~1" .docksal/docksal.env
	fi
	fin restart
	echo -e "${GREEN}xDebug disabled!${NC}"
    ;;

    ioncube:install)
    ioncube
	echo -e "${GREEN}ionCube installed!${NC}"
    ;;

    *)
    usage
    ;;
esac

exit 0
